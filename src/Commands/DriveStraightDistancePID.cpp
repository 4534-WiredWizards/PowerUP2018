// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveStraightDistancePID.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveStraightDistancePID::DriveStraightDistancePID(double distance, double rate): frc::PIDCommand(0.1,0.001,0.0) {
    m_distance = distance;
    m_rate = rate;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	GetPIDController()->SetAbsoluteTolerance(1.0);
	SetSetpoint(distance);
	GetPIDController()->SetOutputRange(-m_rate * 0.7, m_rate * 0.7);
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveStraightDistancePID::Initialize() {
	//Robot::driveTrain->ArcadeDrive(m_rate, 0);
	Robot::driveTrain->resetDistanceCounter();
}

// Called repeatedly when this Command is scheduled to run
void DriveStraightDistancePID::Execute() {

}

// Make this return true when this Command no longer needs to run execute()
bool DriveStraightDistancePID::IsFinished() {
    //if(abs(Robot::driveTrain->getRightDistanceCounter()) < m_distance) return false;
    //else return true;

	return GetPIDController()->OnTarget();

}

// Called once after isFinished returns true
void DriveStraightDistancePID::End() {
	Robot::driveTrain->ArcadeDrive(0, 0);
	Robot::driveTrain->resetDistanceCounter();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveStraightDistancePID::Interrupted() {
	Robot::driveTrain->ArcadeDrive(0, 0);
	Robot::driveTrain->resetDistanceCounter();
}

double DriveStraightDistancePID::ReturnPIDInput() {
	return ((Robot::driveTrain->getRightDistanceCounter()+Robot::driveTrain->getLeftDistanceCounter())/2);
}

void DriveStraightDistancePID::UsePIDOutput(double output) {
	Robot::driveTrain->ArcadeDrive(output,0);
}


