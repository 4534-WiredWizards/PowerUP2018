// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "../Robot.h"
#include "CenterAuto.h"
#include "DriveStraightDistance.h"
#include "EjectBox.h"
#include "TurnAngle.h"



// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

CenterAuto::CenterAuto() {



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
     // Add Commands here:
    // e.g. AddSequential(new Command1());
    //      AddSequential(new Command2());
    // these will run in order.

    // To run multiple commands at the same time,
    // use AddParallel()
    // e.g. AddParallel(new Command1());
    //      AddSequential(new Command2());
    // Command1 and Command2 will run in parallel.

    // A command group will require all of the subsystems that each member
    // would require.
    // e.g. if Command1 requires chassis, and Command2 requires arm,
    // a CommandGroup containing them would require both the chassis and the
    // arm.
              // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
				switch (Robot::target){
				case 0:
					AddSequential(new DriveStraightDistance(120,1));
					break;
				case 1:
					if(Robot::SwitchPosition[0]=='L'){
						AddSequential (new DriveStraightDistance(84,1));
						AddSequential (new TurnAngle(-90,1));
						AddSequential (new DriveStraightDistance(66,1));
						AddSequential (new TurnAngle(90,1));
						AddSequential (new DriveStraightDistance(48,1));
						AddSequential (new EjectBox(1));
					} 	else {
						AddSequential (new DriveStraightDistance(84,1));
						AddSequential (new TurnAngle(90,1));
						AddSequential (new DriveStraightDistance(66,1));
						AddSequential (new TurnAngle(-90,1));
						AddSequential (new DriveStraightDistance(48,1));
						AddSequential (new EjectBox(1));
					}
						break;
				case 2:
					if(Robot::SwitchPosition[1]=='L'){
						AddSequential (new DriveStraightDistance(96,1));
						AddSequential (new TurnAngle(-90,1));
						AddSequential (new DriveStraightDistance(120,1));
						AddSequential (new TurnAngle(90,30));
						AddSequential (new DriveStraightDistance(228,1));
						AddSequential (new TurnAngle(90,1));
						AddSequential (new EjectBox(1));
					}	else {
						AddSequential (new DriveStraightDistance(96,1));
						AddSequential (new TurnAngle(90,1));
						AddSequential (new DriveStraightDistance(120,1));
						AddSequential (new TurnAngle(-90,1));
						AddSequential (new DriveStraightDistance(228,1));
						AddSequential (new TurnAngle(-90,1));
						AddSequential (new EjectBox(1));

					}
						break;
				default:
					AddSequential (new DriveStraightDistance(120,1));
					break;

				}}

              // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

