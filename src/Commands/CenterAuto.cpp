// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "../Robot.h"
#include "CenterAuto.h"
#include "DriveStraightDistancePID.h"
#include "EjectBox.h"
#include "TurnAnglePID.h"
#include "EjectBoxTimed.h"
#include "LiftToHeight.h"
#include "BoxHandlerTrigger.h"
#include "DriveStraightTimed.h"
#include "LowerBoxHandler.h"
#include "RaiseBoxHandler.h"
#include "ResetGyro.h"
#include "IntakeDrop.h"
#include "IntakeGrab.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

CenterAuto::CenterAuto() {
	AddSequential (new DriveStraightTimed(frc::SmartDashboard::GetNumber("Auto Delay",0),0));
	AddSequential (new ResetGyro());

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	// Add Commands here:
	// e.g. AddSequential(new Command1());
	//      AddSequential(new Command2());
	// these will run in order.

	// To run multiple commands at the same time,
	// use AddParallel()
	// e.g. AddParallel(new Command1());
	//      AddSequential(new Command2());
	// Command1 and Command2 will run in parallel.

	// A command group will require all of the subsystems that each member
	// would require.
	// e.g. if Command1 requires chassis, and Command2 requires arm,
	// a CommandGroup containing them would require both the chassis and the
	// arm.
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

	switch (Robot::target){
	case 0:
		//AddSequential(new DriveStraightDistancePID(120,1.0));
		AddSequential(new DriveStraightTimed(3.0,0.8));
		break;
	case 1:
		if(Robot::SwitchPosition[0]=='L'){
			AddSequential (new DriveStraightDistancePID(38,0.7), 1.5);
			AddSequential (new TurnAnglePID(270.0,1.0), 1.0);
			AddSequential (new DriveStraightDistancePID(50,1.0), 2.0);
			AddSequential (new TurnAnglePID(0,1.0), 1.0);
			AddParallel (new LiftToHeight(17));
			AddSequential (new DriveStraightDistancePID(45,1.0), 2.0);
			AddSequential (new LowerBoxHandler(), 0.1);
			AddSequential(new DriveStraightTimed(1.50,0.5));
			AddSequential (new IntakeDrop());
			AddSequential (new EjectBoxTimed(0.2,0.7));
			AddSequential(new DriveStraightTimed(0.2, 0));
			AddSequential (new RaiseBoxHandler());
		} 	else {
			AddSequential (new DriveStraightDistancePID(38,0.7), 1.5);
			AddSequential (new TurnAnglePID(90,1.0), 1.0);
			AddSequential (new DriveStraightDistancePID(50,1.0), 2.0);
			AddSequential (new TurnAnglePID(0,1.0),1.5);
			AddParallel (new LiftToHeight(17));
			AddSequential (new DriveStraightDistancePID(45,1.0), 2.0);
			AddSequential (new LowerBoxHandler(), 0.1);
			AddSequential(new DriveStraightTimed(1.50, 0.5));
			AddSequential (new IntakeDrop());
			AddSequential (new EjectBoxTimed(0.2,0.7));
			AddSequential(new DriveStraightTimed(0.2, 0));
			AddSequential (new RaiseBoxHandler());
		}
		AddSequential(new DriveStraightTimed(0.5, -0.5));
		AddSequential(new LiftToHeight(0));
		break;
	case 2:
		if(Robot::SwitchPosition[1]=='L'){
			AddSequential (new DriveStraightDistancePID(36,1.0));
			AddSequential (new TurnAnglePID(270,1.0));
			AddSequential (new DriveStraightDistancePID(120,1.0));
			AddSequential (new TurnAnglePID(0,1.0));
			AddSequential (new DriveStraightDistancePID(288,1.0));
			AddParallel (new LiftToHeight(40));
			AddSequential (new TurnAnglePID(90,1.0));
			AddSequential (new EjectBoxTimed(1.5, 0.7));
		}	else {
			AddSequential (new DriveStraightDistancePID(36,1.0));
			AddSequential (new TurnAnglePID(90,1.0));
			AddSequential (new DriveStraightDistancePID(120,1.0));
			AddSequential (new TurnAnglePID(0,1.0));
			AddSequential (new DriveStraightDistancePID(288,1.0));
			AddParallel (new LiftToHeight(40));
			AddSequential (new TurnAnglePID(270,1.0));
			AddSequential (new EjectBoxTimed(1.5, 0.7));

		}
		AddSequential(new DriveStraightTimed(0.5, -0.5));
		AddSequential(new LiftToHeight(0));
		break;
	case 3:
		if(Robot::SwitchPosition[0]=='L'){
			AddSequential (new DriveStraightDistancePID(38,1.0));
			AddSequential (new TurnAnglePID(270,1.0));
			AddSequential (new DriveStraightDistancePID(66,1.0));
			AddSequential (new TurnAnglePID(0,1.0));
			AddParallel (new LiftToHeight(24));
			AddSequential (new DriveStraightDistancePID(94,1.0));
			AddSequential (new EjectBoxTimed(1.5, 0.7));

			if (Robot::SwitchPosition[1]=='L'){
				AddSequential (new TurnAnglePID(270,1.0));
				AddSequential (new DriveStraightDistancePID(21,1.0));
				AddSequential (new TurnAnglePID(0,1.0));
				AddSequential (new DriveStraightDistancePID(21,1.0));
				//I have no idea where to even begin with the picking up boxes command.
				AddSequential (new DriveStraightDistancePID(42,1.0));
				AddSequential (new TurnAnglePID(90,1.0));
				AddSequential (new EjectBoxTimed(1.5, 0.7));


			} else{
				if(Robot::SwitchPosition[0]=='R'){
					AddSequential (new TurnAnglePID(270,1.0));
					AddSequential (new DriveStraightDistancePID(20,1.0));
					AddSequential (new TurnAnglePID(0,1.0));
					AddSequential (new DriveStraightDistancePID(40,1.0));
					//insert box grabbing code
					AddSequential (new TurnAnglePID(90,1.0));
					AddParallel (new LiftToHeight(24));
					AddSequential (new DriveStraightDistancePID(40,1.0));
					AddSequential (new EjectBoxTimed(1.5, 0.7));
				}
			}
		} 	else {
			AddSequential (new DriveStraightDistancePID(38,1.0));
			AddSequential (new TurnAnglePID(90,1.0));
			AddSequential (new DriveStraightDistancePID(66,1.0));
			AddSequential (new TurnAnglePID(0,1.0));
			AddParallel (new LiftToHeight(24));
			AddSequential (new DriveStraightDistancePID(94,1.0));
			AddSequential (new EjectBoxTimed(1.5, 0.7));
			if(Robot::SwitchPosition[1]=='R'){
				AddSequential (new TurnAnglePID(90,1.0));
				AddSequential (new DriveStraightDistancePID(24,1.0));
				AddSequential (new TurnAnglePID(0,1.0));
				AddSequential (new DriveStraightDistancePID(40,1.0));
				AddParallel (new LiftToHeight(40));
				AddSequential (new TurnAnglePID(270,1.0));
				AddSequential (new EjectBoxTimed(1.5, 0.7));
			} else {
				AddSequential (new TurnAnglePID(0,1.0));
				AddSequential (new DriveStraightDistancePID(40,1.0));
				AddSequential (new TurnAnglePID(90,1.0));
				//insert box grabbing code
				AddSequential (new DriveStraightDistancePID(60,1.0));
				AddSequential (new TurnAnglePID(180,1.0));
				AddParallel (new LiftToHeight(40));
				AddSequential (new DriveStraightDistancePID(40,1.0));
				AddSequential (new EjectBoxTimed(1.5, 0.7));

			}


		}
		break;
	default:
		AddSequential (new DriveStraightDistancePID(120,1));
		break;

	}
}



// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

